@using TicketPlace2._0.Models

@{
    ViewData["Title"] = "ChoixPlace";
    var evenementTypePlaces = ViewData["EvenementTypePlaces"] as List<EvenementTypePlaceModel>;
    var userId = ViewData["UtilisateurId"] as string;
    var typePlaceAlreadySelected = ViewData["TypePlaceAlreadySelected"] as List<PlaceVendueModel>;
}

<h1>@ViewData["Title"]</h1>

<div>
    choix de la place
    
    <div id="chair-plan"></div>
    <div class="mt-3">
        <a asp-controller="Evenement" asp-action="ListEvenementPaginated"  class="btn btn-primary">Back to List</a>
    </div>
</div>
<div id="chair-plan" style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 10px; width: 500px; margin: 20px auto; padding: 20px;">
    @foreach (var item in evenementTypePlaces)
    {
        <div class="d-flex align-items-center justify-content-center">
            <div class="chair" style="background-color: @item.TypePlace.Couleurs; color: white; font-weight: bold; width: 40px; height: 40px;">
                <!-- Vous pouvez ajouter un contenu à la chaise si nécessaire -->
            </div>
            <div class="info text-center" style="margin-left: 10px;">@item.TypePlace.Type</div>
        </div>
    }
    <div class="d-flex align-items-center justify-content-center">
        <div class="chair" style="background-color: purple; color: white; font-weight: bold; width: 40px; height: 40px;">
            <!-- Vous pouvez ajouter un contenu à la chaise si nécessaire -->
        </div>
        <div class="info text-center" style="margin-left: 10px;">Réservé</div>
    </div>
    
    <div class="d-flex align-items-center justify-content-center">
        <div class="chair" style="background-color: pink; color: white; font-weight: bold; width: 40px; height: 40px;">
            <!-- Vous pouvez ajouter un contenu à la chaise si nécessaire -->
        </div>
        <div class="info text-center" style="margin-left: 10px;">Acheté</div>
    </div>
</div>


<div class="modal fade" id="chairModal" tabindex="-1" aria-labelledby="chairModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="chairModalLabel">Informations sur la chaise</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formulaire" asp-action="InsertPlaceVendu">
                <div class="modal-body">
                    <p id="chair-info">Sélectionnez une chaise pour plus d'informations.</p>
                    <p id="chair-price"></p>
                        <input type="hidden" name="EvenementId" value="/* Set this value dynamically */" id="EvenementId" />
                        <input type="hidden" name="TypePlaceId" value="/* Set this value dynamically */" id="TypePlaceId" />
                        <input type="hidden" name="UtilisateurId" value="@userId" id="UtilisateurId" />
                        <input type="hidden" name="NumeroDePlace" value="/* Set this value dynamically */" id="NumeroDePlace" />
                        <div class="mb-3">
                            <label for="Prix" class="form-label">Prix</label>
                            <input type="hidden" class="form-control" id="Prix" name="Prix" required id="Prix" >
                        </div>
                        <input type="hidden" id="TypeReservation" name="TypeReservation" value="" id="TypeReservation" />

                        @* <input type="submit" value="valider" re/> *@
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"  id="btnReserver" onclick="setTypeReservationAndSubmit('RESERVER')">Reserver</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"  id="btnAcheter" onclick="setTypeReservationAndSubmit('ACHETER')">Acheter</button>
                    @* <button type="button" class="btn btn-primary" id="save-chair-info">Sauvegarder</button> *@
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    const evenement = @Html.Raw(Json.Serialize(Model));
    var evenementTypePlaces = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(evenementTypePlaces));
    const typePlaceAlreadySelected = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(typePlaceAlreadySelected));
    console.log(evenementTypePlaces);
    console.log(typePlaceAlreadySelected,'test');
    
</script>

@section Scripts {
    <script>
        function setTypeReservationAndSubmit(value) {
            document.getElementById('TypeReservation').value = value;
            const form = document.getElementById('formulaire');
            if (form.checkValidity()) {
                form.submit(); 
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                alert("Form is not valid. Please check the fields.");
            }
        }
        (function() {
            @* console.log("**********",evenement) *@
            const capacity = evenement.espace.capacite;
            const chairPlan = document.getElementById('chair-plan');
            const Longueur =  evenement.espace.longueur;
            const Largeur =  evenement.espace.largeur;
            chairPlan.style.display = 'grid';
            chairPlan.style.gridTemplateColumns = `repeat(${Longueur}, 1fr)`; 
            chairPlan.style.gap = '10px';
            chairPlan.style.width = '500px';
            chairPlan.style.margin = '20px auto';
            chairPlan.style.padding = '20px';
            function getChairTypeColor(chairId) {
                for (const typePlace of evenementTypePlaces) {
                    const emplacements = JSON.parse(typePlace.Emplacements);
                    if (emplacements.includes(chairId.toString())) {
                        return isPlaceAlreadySelected(chairId) ? (getTypeBillet(chairId) == "ACHETER" ? 'pink': 'purple')  : typePlace.TypePlace.Couleurs;
                    }
                }
                return "blue"; 
            }
            function getChairPrice(chairId){Largeur
                for (const typePlace of evenementTypePlaces) {
                    const emplacements = JSON.parse(typePlace.Emplacements);
                    if (emplacements.includes(chairId.toString())) {
                        return typePlace.Prix;
                    }
                }
                return "0"; 
            }
            function getChair(chairId) {
                for (const typePlace of evenementTypePlaces) {
                    const emplacements = JSON.parse(typePlace.Emplacements);
                    if (emplacements.includes(chairId.toString())) {
                        return typePlace;
                    }
                }
                return null;
            }
            function getTypeBillet(chairId){
                const getTypeBillet =  typePlaceAlreadySelected.find(place => place.NumeroDePlace === chairId);
                return getTypeBillet.TypeReservation;
                @* console.log(getTypeBillet)
                return 'ACHETER' *@
            }
            function isPlaceAlreadySelected(chairId) {
                for (const placeVendue of typePlaceAlreadySelected) {
                    if (placeVendue.NumeroDePlace === chairId) {
                        return true;
                    }
                }
                return false;
            }
            function generateChairs(numSeats) {
                for (let i = 0; i < numSeats; i++) {
                    const chair = document.createElement('div');
                    chair.classList.add('chair', 'd-flex', 'align-items-center', 'justify-content-center', 'text-white', 'font-weight-bold', 'm-1');
                    chair.style.backgroundColor =  getChairTypeColor(i);;
                    chair.style.width = '40px';
                    chair.style.height = '40px';
                    chair.textContent = i;
                    chairPlan.appendChild(chair);
                    chair.addEventListener('click', function() {
                        const chairInfo = `Informations sur la chaise numéro ${i}`;
                        document.getElementById('chair-info').textContent = chairInfo;
                        const chairPrice = `Prix: ${getChairPrice(i)} Ar`;
                        document.getElementById('chair-price').textContent = chairPrice;
                        const chair = getChair(i);
                        document.getElementById('EvenementId').value = chair.EvenementId;
                        document.getElementById('TypePlaceId').value = chair.TypePlaceId;
                        document.getElementById('NumeroDePlace').value = i;
                        document.getElementById('Prix').value = chair.Prix;
                        document.getElementById('TypeReservation').value = chair.TypePlace.Type;

                        if (!isPlaceAlreadySelected(i)) {
                            const chairModal = new bootstrap.Modal(document.getElementById('chairModal'));
                            chairModal.show();
                        } 
                    });
                }
            }
            generateChairs(capacity);
        })();
    </script>
}